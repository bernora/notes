./ in ./index.html tells the browser to look for the file in the current folder.


HTML Boilerplate
<!DOCTYPE html>
<html>
  <head>
    <title></title>
  <link href='./resources/css/reset.css' rel='stylesheet' type='text/css'>
  <link href='./resources/css/styles.css' rel='stylesheet' type='text/css'>
  </head>
  <body>

  </body>
</html>


CCS selectors

img {
  height: 150px;
}

.description {
  font-size: 20px;
}

#cook-time {
  font-weight: bold;
}

P with .time classname
p.time {
  color: gray;
}


li elements withing the .ingredients class
.ingredients li {
  list-style: square;
}

a elements within .citation class with classname .external-link
.citation a.external-link {
  color: SeaGreen;
}

multiple selectors:
h1, h2, p, li {
  font-family: Helvetica;
}

Video:
<video src="https://s3.amazonaws.com/codecademy-content/courses/freelance-1/unit-1/lesson-2/htmlcss1-vid_brown-bear.mp4" height="240" width="320" controls>Video not supported</video>

border: 3px solid coral;

Flexbox:

div.container {
  display: flex;
  display: inline-flex;
  justify-content: flex-end;
  align-items: baseline; (only one line)
  align-items: space-around;
  flex-wrap: wrap;
  flex-direction: column;
}

div.child {
  flex-grow: 1;
  flex-shrink: 2;
  flex-basis: 150px;
}

OR 

div.child {
  flex: 2 1 150px;
}



To designate an element as a flex container, set the element's display property to flex or inline-flex. Once an item is a flex container, there are several properties we can use to specify how its children behave. In this lesson we will cover these properties:

justify-items
align-items
flex-grow
flex-shrink
flex-basis
flex
flex-wrap
align-content
flex-direction
flex-flow

Default behaviour:
In previous exercises, when we changed the display value of parent containers to flex or inline-flex, all of the child elements (flex items) moved toward the upper left corner of the parent container. This is the default behavior of flex containers and their children. We can specify how flex items spread out from left to right, along the main axis. 

Positioning with Flex-box:
To position the items from left to right, we use a property called justify-content.

There are five values for the justify-content property:

flex-start — all items will be positioned in order starting, from the left of the parent container, with no extra space between or before them.
flex-end — all items will be positioned in order, with the last item starting on the right side of the parent container, with no extra space between or after them.
center — all items will be positioned in order, in the center of the parent container with no extra space before, between, or after them.
space-around — items will be positioned with equal space before and after each item, resulting in double the space between elements.
space-between — items will be positioned with equal space between them, but no extra space before the first or after the last elements.

#flexstart {
  justify-content: flex-start;
  display: inline-flex;
}

#flexend {
  justify-content: flex-end;
  display: inline-flex;

}

#center {
  justify-content: center;
  display: inline-flex;
}

#spacearound {
  justify-content: space-around;
  display: inline-flex;
}

#spacebetween {
  justify-content: space-between;
  display: inline-flex;
}


There are five values we can use for the align-items property:

flex-start — all elements will be positioned at the top of the parent container.
flex-end — all elements will be positioned at the bottom of the parent container.
center — the center of all elements will be positioned halfway between the top and bottom of the parent container.
baseline — the bottom of the content of all items will be aligned with each other.
stretch — if possible, the items will stretch from top to bottom of the container (this is the default value; elements with a specified height will not stretch; elements with a minimum height or no height specified will stretch).



The flex-grow property allows us to specify if items should grow to fill a container and also which items should grow proportionally more or less than others.

flex-basis allows us to specify the width of an item before it stretches or shrinks.


The flex-wrap property can accept three values:

wrap — child elements of a flex container will move down to the next line starting from the final item and working towards the first.
nowrap — prevents items from wrapping; this is the default value and is only necessary to override a wrap value set by a different CSS rule.
wrap-reverse — the wrapped element is displayed on top of the other elements in the flex container starting from the last and working toward the first (a mirror image of the wrap value).

align-items is for aligning elements within a single row. If a flex container has multiple rows of content, we can use align-content to space the rows from top to bottom.

align-content accepts six values:

flex-start — all rows of elements will be positioned at the top of the parent container with no extra space between.
flex-end — all rows of elements will be positioned at the bottom of the parent container with no extra space between.
center — all rows of elements will be positioned at the center of the parent element with no extra space between.
space-between — all rows of elements will be spaced evenly from the top to the bottom of the container with no space above the first or below the last.
space-around — all rows of elements will be spaced evenly from the top to the bottom of the container with the same amount of space at the top and bottom and between each element.
stretch — if a minimum height or no height is specified, the rows of elements will stretch to fill the parent container from top to bottom (default value).


The major axis is used to position flex items with the following properties:

justify-content
flex-wrap
flex-grow
flex-shrink
The cross axis is used to position flex items with the following properties:

align-items
align-content
The major axis and cross axis are interchangeable. We can switch them using the flex-direction property. If we add the flex-direction property and give it a value of column, the flex items will be ordered vertically, not horizontally.



The flex-direction property can accept four values:

row — elements will be positioned from left to right across the parent element starting from the top left corner (default).
row-reverse — elements will be positioned from right to left across the parent element starting from the top right corner.
column — elements will be positioned from top to bottom of the parent element starting from the top left corner.
column-reverse — elements will be positioned from the bottom to the top of the parent element starting from the bottom left corner.


flex-flow property is used to declare both the flex-wrap and flex-direction properties in one line.
.container {
  display: flex;
  flex-flow: wrap column;
}

display: flex changes an element to a block-level container with flex items inside of it.
display: inline-flex allows multiple flex containers to appear inline with each other.
justify-items is used to space items along the major axis.
align-items is used to space items along the cross axis.
flex-grow is used to specify how much space (and in what proportions) flex items absorb along the major axis.
flex-shrink is used to specify how much flex items shrink and in what proportions along the major axis.
flex-basis is used to specify the initial size of an element styled with flex-grow and/or flex-shrink.
flex is used to specify flex-grow, flex-shrink, and flex-basis in one declaration.
flex-wrap specifies that elements should shift along the cross axis if the flex container is not large enough.
align-content is used to space rows along the cross axis.
flex-direction is used to specify the major and cross axes.
flex-flow is used to specify flex-wrap and flex-direction in one declaration.
Flex containers can be nested inside of each other by declaring display: flex or display: inline-flex for children of flex containers.


Aligning items to the right: 
margin-right: auto; (on flex-item)
justify-content: flex-end; (on flex container but then all flexitems will align)

Aligning items to the left: 
margin-left: auto;
justify-content: flex-start;


Responsive Design

The unit of rem sizes font relative to the font size of a root element. That root element is the <html> element.


When percentages are used to set padding and margin, however, they are calculated based only on the width of the parent element.

For example, when a property like margin-left is set using a percentage (say 50%), the element will be moved halfway to the right in the parent container (as opposed to the child element receiving a margin half of its parent's margin).

Vertical padding and margin are also calculated based on the width of the parent. 

Note: When using relative sizing, ems and rems should be used to size text and dimensions on the page related to text size (i.e. padding around text). This creates a consistent layout based on text size. Otherwise, percentages should be used.

Scaling images and videos proportionnaly

.container {
  width: 50%;
  height: 200px;
  overflow: hidden;
}

.container img {
  max-width: 100%;
  height: auto;
  display: block;
}


scaling background images
body {
  background-image: url('#');
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
}


Media Queries

@media only screen and (max-width: 480px) {
  body {
    font-size: 12px;
  }
}

multiple rules:
@media only screen and (min-width: 320px) and (max-width: 480px) {
    /* ruleset for 320px - 480px */
}

@media only screen and (min-width: 320px) { 
    /* ruleset for 320px - 479px */
}


@media only screen and (min-width: 480px) { 
    /* ruleset for > 480px */
}

Trageting screen resolution
@media only screen and (min-resolution: 300dpi) {
    /* CSS for high resolution screens */
}

Combnation of multiple rules 
@media only screen and (max-width: 480px) and (min-resolution: 300dpi) {
    /* CSS ruleset */
}

Media queries when you need either OR listing:
For example, if we needed to apply a style when only one of the below is true:

The screen is less than 480 pixels wide
The screen is in landscape mode
We could write:

@media only screen and (min-width: 480px), (orientation: landscape) {
    /* CSS ruleset */
}

Page orientation rules:
Note that the second media feature is orientation. The orientation media feature detects if the page has more width than height. If a page is wider, it's considered landscape, and if a page is taller, it's considered portrait.

Creating breakpoints:
@media only screen and (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {
    /* CSS ruleset */
}



COLORS

color: hsla(34, 100%, 50%, 0.1);
The first number represents the degree of the hue, and can be between 0 and 360. The second and third numbers are percentages representing saturation and lightness respectively. The fourth value (which we have not seen before) is the alpha. This last value is sometimes called the opacity.
Alpha is a decimal number from zero to one. 
Hue is the first number. It refers to an angle on a color wheel. Red is 0 degrees, Green is 120 degrees, Blue is 240 degrees, and then back to Red at 360. You can see an example of this color wheel here. If alpha is zero, the color will be completely transparent. If alpha is one, the color will be opaque. The value for half transparent would be 0.5.

You can also find inspiration in other media such as film, paintings, and print design. To start, try one of the many websites where people show off their designs, such as Dribbble, siteInspire, or Awwwards.

Font-weight

Font-weight has a scale ranging from 100 to 900. Valid values are multiples of 100 within this range such as 200 or 500.

400 is the default font-weight of most text.
700 signifies a bold font-weight.
300 signifies a light font-weight.

Line height
A unitless number, such as 1.2. This number is an absolute value that will compute the line height as a ratio of the font size.

Font-family
To use fallback fonts, the following syntax is required:

h1 {
  font-family: "Garamond", "Times", serif;
}

Linking fonts

Multiple fonts: <head>
  <link href="https://fonts.googleapis.com/css?family=Droid+Serif|Playfair+Display" type="text/css" rel="stylesheet">
</head>


Pseudo-class selector

#banner h1:hover {
  color: #30627E;
}
Generally speaking, pseudo-class selectors:

Begin with a colon and are placed at the end of a selector with no spaces before them
Are often preceded by a traditional selector, such as #banner, .links, header, or ul li.

There are a number of other pseudo-classes we can use to target elements based on user interaction.
These are often referred to as dynamic pseudo-classes, and the most common ones are:

:link to style an unvisited link.
:visited to style a visited link.
:hover to style an element when a user hovers over the element with the cursor.
:active to style an element when a user activates an element. This is the time between when a user clicks an element and when they release the mouse.


Sructural pseudo classes

ul li:first-child {
  color: gray;
}
the selector will target list items if they are the first-child of their parent. If there are no list items that are the first-child of their parent, no list items will be styled.

<ul>
 <li>item 1</li>
 <li>item 2</li>
</ul>
The first list item would be styled. Further, if we used the same unordered list multiple times in our project, each occurence of the unordered list would be styled the same way.

However, if we had this code in index.html:

<ul>
  <span><li>item 1</li></span>
  <span><li>item 2</li></span>
</ul>
All of the list items would be styled, since they are all technically a :first-child of their parent element. 

last-child
Similar to the :first-child pseudo-class, the :last-child pseudo-class targets the last child of a parent element.

ul li:last-child {
  color: gray;
}


nth child
The nth-child selector allows us to specify subsets of child elements we want to style, such as every even element, every third element, and so on. When using nth-child selectors, we must provide information about what pattern of elements we want to select.

The pattern nth-child uses is in the form of an + b

a represents the multiple of elements we want to select. If we want to select every second element, we would set a to 2. If we wanted to select every third element, we would set a to 3.
n represents a set of zero and increasing positive integers. It is not the element that is selected. The selected element is the result of a x n + b.
b represents the first element we want to start the subset on. If we want to start styling on the third child, we would set b to 3.
For example:

a:nth-child(2n + 3) selects every second link, starting with the third link.
a:nth-child(3n + 4) selects every third link, starting with the fourth link.

a:nth-child(4n + 0)
If b is of value 0 or is not specified, we will start on element 0. Since this is not a real element, our first styled element will be on the next interval specified by a.
In the example above, we would style every fourth element, starting on the fourth element.

We can also use the nth-child selector to select all even or odd elements under a parent element.

a:nth-child(even)
By specifying even or odd, we can style either even or odd child elements, respectively.#

TRANSITIONS

These changes are a type of state change. CSS transitions allow us to control the timing of visual state changes. We can control the following four aspects of an element's transition:

Which CSS properties transition
How long a transition lasts
How much time there is before a transition begins
How a transition accelerates


To create a simple transition in CSS, we must specify two of the four aspects:

The property that we want to transition.
The duration of the transition.

a: hover {
  background-color: blue;
}

a {
  transition-property: color;
  transition-duration: 1.5s;
  transition-timing-function: linear;
  transition-delay: 0.5s;
}

Full list of propertise that can be animated: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties

Different properties transition in different ways, for example:

Color values, like color and background-color, will blend to a new color.
Length values like font-size, width, and height will grow or shrink.
Duration is specified in seconds or milliseconds, such as 3s, 0.75s, 500ms. The default value is 0s, or instantaneous, as if there is no transition.

Our next transition property is transition-delay. Much like duration, its value is an amount of time. Delay specifies the time to wait before starting the transition.

The last transition property is transition-timing-function. The timing function describes the pace of the transition.

The default value is ease, which starts the transition slowly, speeds up in the middle, and slows down again at the end.

Other valid values include:

ease-in — starts slow, accelerates quickly, stops abruptly
ease-out — begins abruptly, slows down, and ends slowly
ease-in-out — starts slow, gets fast in the middle, and ends slowly
linear — constant speed throughout

Transition shorthand

The 4 transition property in one line: transition. This shorthand property describes each aspect of the transition puzzle in a single declaration. The properties must be specified in this order: transition-property, transition-duration, transition-timing-function, transition-delay.

transition: color 1.5s linear 0.5s;

Combinations
The shorthand transition rule has one advantage over the set of separate transition-<property> rules: you can describe unique transitions for multiple properties, and combine them.

To combine transitions, add a comma (,) before the semicolon (;) in your rule. After the comma, use the same shorthand syntax. For example:

transition: color 1s linear,
font-size 750ms ease-in 100ms;

